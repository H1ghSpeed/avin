#![allow(dead_code)]
#![allow(unused)]

use avin_analyse::*;
use avin_core::*;
use avin_strategy::*;
use avin_utils::*;

fn main() {
    let iid = Manager::find_iid("moex_share_sber").unwrap();
    let tf = TimeFrame::Day;
    let mut chart = Chart::empty(&iid, tf);

    let bars_data = bars();
    for b in bars_data.iter() {
        let bar = Bar::new(b.0, b.1, b.2, b.3, b.4, b.5 as u64);
        chart.add_bar(bar);
    }

    let bars = chart.bars();
    println!("{}", bars.len());
    println!("{}", bars[0]);

    // let tf = TimeFrame::Day;
    // let begin = str_date_to_utc("2025-06-23");
    // let end = str_date_to_utc("2025-07-29");
    // let mut asset = Asset::new("moex_share_afks").unwrap();
    // asset.load_chart_period(tf, begin, end).unwrap();
    // let chart = asset.chart_mut(tf).unwrap();
    // ExtremumIndicator::init(chart);
    // TrendAnalytic::init(chart);
    // let trends = chart.all_trend(Term::T1);
    // for i in trends.iter() {
    //     println!("{i}");
    // }
    // println!("-----------------------------------");
    //
    // let iid = Manager::find_iid("moex_share_afks").unwrap();
    // let mut simulator = Simulator::new(&iid, begin, end);
    // simulator.activate(tf);
    // let n = 24 * 60;
    // let chart = simulator.asset_mut().chart_mut(tf).unwrap();
    // ExtremumIndicator::init(chart);
    // TrendAnalytic::init(chart);
    //
    // simulator.step(n);
    // simulator.step(n);
    // simulator.step(n);
    // simulator.step(n);
    // simulator.step(n);
    // simulator.step(n);
    // simulator.step(n);
    // simulator.step(n);
    // simulator.step(n);
    // simulator.step(n);
    // simulator.step(n);
    // simulator.step(n);
    // simulator.step(n);
    // simulator.step(n);
    // simulator.step(n);
    // simulator.step(n);
    // simulator.step(n);
    // simulator.step(n);
    // simulator.step(n);
    // simulator.step(n);
    // simulator.step(n);
    // simulator.step(n);
    // simulator.step(n);
    // simulator.step(n);
    // simulator.step(n);
    // simulator.step(n);
    // simulator.step(n);
    // simulator.step(n);
    // simulator.step(n);
    // simulator.step(n);
    //
    // let chart = simulator.asset().chart(tf).unwrap();
    // println!("{}", &chart.now().unwrap());
    // let trends = chart.all_trend(Term::T1);
    // for i in trends.iter() {
    //     println!("{i}");
    // }
}

fn bars() -> std::vec::Vec<(i64, f64, f64, f64, f64, i32)> {
    // (1736424000000000000, 14.611, 14.664, 14.566, 14.59, 6403900),
    //  last_bar.ts_nanos long = 1735884000000000000
    //  next_ts long = 1735948800000000000
    //  new_bar.ts_nanos long = 1735891200000000000
    vec![
        (1735884000000000000, 15.7, 15.7, 15.7, 15.7, 158400),
        (1735887600000000000, 15.666, 15.667, 15.06, 15.088, 33528400),
        (1735891200000000000, 15.088, 15.208, 15.013, 15.084, 100100),
        (1735894800000000000, 15.081, 15.129, 14.951, 14.989, 6961200),
        (1735898400000000000, 14.994, 15.012, 14.846, 14.898, 143200),
        (1735902000000000000, 14.897, 15.013, 14.868, 14.969, 6667600),
        (1735905600000000000, 14.969, 15.03, 14.931, 14.961, 3324600),
        (1735909200000000000, 14.965, 15.04, 14.939, 14.977, 3052300),
        (1735912800000000000, 14.977, 15.025, 14.97, 14.986, 2542800),
        (1735916400000000000, 14.989, 15.001, 14.96, 14.969, 1636700),
        (1735920000000000000, 14.96, 14.997, 14.952, 14.96, 1142400),
        (1735923600000000000, 14.967, 15.0, 14.959, 14.978, 913400),
        (1735927200000000000, 14.98, 15.099, 14.978, 15.069, 3730300),
        (1735930800000000000, 15.066, 15.197, 15.065, 15.151, 3829800),
        (1735934400000000000, 15.153, 15.18, 15.088, 15.125, 2514300),
        (1736143200000000000, 14.931, 14.931, 14.931, 14.931, 271900),
        (1736146800000000000, 14.935, 14.984, 14.771, 14.912, 151200),
        (1736150400000000000, 14.908, 14.978, 14.856, 14.934, 3983300),
        (1736154000000000000, 14.934, 14.94, 14.817, 14.875, 3108400),
        (1736157600000000000, 14.873, 14.914, 14.863, 14.879, 1131500),
        (1736161200000000000, 14.88, 14.944, 14.878, 14.919, 1195300),
        (1736164800000000000, 14.919, 14.968, 14.903, 14.922, 1844900),
        (1736168400000000000, 14.918, 14.932, 14.878, 14.932, 1149000),
        (1736172000000000000, 14.932, 15.075, 14.914, 15.002, 3520600),
        (1736175600000000000, 15.005, 15.038, 14.98, 14.99, 1264800),
        (1736179200000000000, 14.989, 15.014, 14.912, 14.924, 2333300),
        (1736182800000000000, 14.925, 14.955, 14.92, 14.949, 609000),
        (1736186400000000000, 14.95, 14.985, 14.941, 14.974, 1256300),
        (1736190000000000000, 14.98, 14.997, 14.948, 14.995, 832600),
        (1736193600000000000, 14.995, 15.08, 14.984, 15.027, 1898400),
        (1736316000000000000, 15.04, 15.04, 15.04, 15.04, 17300),
        (1736319600000000000, 15.039, 15.115, 14.9, 14.97, 8665600),
        (1736323200000000000, 14.962, 15.0, 14.824, 14.868, 12692800),
        (1736326800000000000, 14.859, 14.925, 14.852, 14.892, 3223500),
        (1736330400000000000, 14.889, 15.03, 14.882, 15.01, 4625200),
        (1736334000000000000, 15.01, 15.01, 14.956, 14.978, 1899800),
        (1736337600000000000, 14.978, 15.062, 14.977, 14.998, 3590600),
        (1736341200000000000, 14.999, 15.074, 14.986, 15.05, 2553800),
        (1736344800000000000, 15.054, 15.09, 14.984, 15.014, 3425400),
        (1736348400000000000, 15.015, 15.03, 14.969, 14.999, 2091600),
        (1736352000000000000, 14.999, 15.011, 14.974, 15.0, 1453800),
        (1736355600000000000, 14.996, 15.021, 14.979, 15.008, 1331500),
        (1736359200000000000, 15.008, 15.047, 14.994, 15.044, 1199600),
        (1736362800000000000, 15.04, 15.056, 15.013, 15.028, 927000),
        (1736366400000000000, 15.018, 15.054, 15.006, 15.019, 937400),
        (1736402400000000000, 15.017, 15.017, 15.017, 15.017, 14600),
        (1736406000000000000, 15.017, 15.395, 14.88, 14.919, 37112400),
        (1736409600000000000, 14.916, 14.925, 14.505, 14.597, 326870),
        (1736413200000000000, 14.591, 14.687, 14.515, 14.613, 151000),
        (1736416800000000000, 14.614, 14.77, 14.571, 14.658, 9893000),
        (1736420400000000000, 14.659, 14.734, 14.591, 14.61, 11829200),
        (1736424000000000000, 14.611, 14.664, 14.566, 14.59, 6403900),
    ]
}

// Trend: +4.19 / 4 = 1.05 [vol: 202026600  2025-06-23 00:00:00 -> 2025-06-26 00:00:00]
// Trend: -2.54 / 2 = 1.27 [vol: 112197200  2025-06-26 00:00:00 -> 2025-06-27 00:00:00]
// Trend: +9.34 / 5 = 1.87 [vol: 357876900  2025-06-27 00:00:00 -> 2025-07-01 00:00:00]
// Trend: -2.12 / 2 = 1.06 [vol: 200090000  2025-07-01 00:00:00 -> 2025-07-02 00:00:00]
// Trend: +3.05 / 2 = 1.53 [vol: 147454200  2025-07-02 00:00:00 -> 2025-07-03 00:00:00]
// Trend: -3.31 / 2 = 1.65 [vol: 138290300  2025-07-03 00:00:00 -> 2025-07-04 00:00:00]
// Trend: +1 / 2 = 0.5 [vol: 53604200  2025-07-04 00:00:00 -> 2025-07-05 00:00:00]
// Trend: -1.03 / 3 = 0.34 [vol: 93016500  2025-07-05 00:00:00 -> 2025-07-07 00:00:00]
// Trend: +4.53 / 2 = 2.27 [vol: 301899000  2025-07-07 00:00:00 -> 2025-07-08 00:00:00]
// Trend: -5.09 / 2 = 2.55 [vol: 373274800  2025-07-08 00:00:00 -> 2025-07-09 00:00:00]
// Trend: +4.7 / 2 = 2.35 [vol: 243600700  2025-07-09 00:00:00 -> 2025-07-10 00:00:00]
// Trend: -6.9 / 2 = 3.45 [vol: 162818100  2025-07-10 00:00:00 -> 2025-07-11 00:00:00]
// Trend: +1.29 / 2 = 0.65 [vol: 85354400  2025-07-11 00:00:00 -> 2025-07-12 00:00:00]
// Trend: -2.4 / 3 = 0.8 [vol: 154968300  2025-07-12 00:00:00 -> 2025-07-14 00:00:00]
// Trend: +15.26 / 6 = 2.54 [vol: 725700200  2025-07-14 00:00:00 -> 2025-07-19 00:00:00]
// Trend: -4.04 / 4 = 1.01 [vol: 180621800  2025-07-19 00:00:00 -> 2025-07-22 00:00:00]
// Trend: +3.53 / 2 = 1.76 [vol: 154782600  2025-07-22 00:00:00 -> 2025-07-23 00:00:00]
// Trend: -5.76 / 3 = 1.92 [vol: 319623100  2025-07-23 00:00:00 -> 2025-07-25 00:00:00]
// Trend: +1.67 / 2 = 0.84 [vol: 190950800  2025-07-25 00:00:00 -> 2025-07-26 00:00:00]
//
