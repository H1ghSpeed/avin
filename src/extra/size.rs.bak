/****************************************************************************
 * URL:         http://arsvincere.com
 * AUTHOR:      Alex Avin
 * E-MAIL:      mr.alexavin@gmail.com
 * LICENSE:     MIT
 ****************************************************************************/

use crate::Range;

#[derive(Debug, Clone)]
pub enum Size {
    GreatestSmall(f64),
    AnomalSmall(f64),
    ExtraSmall(f64),
    VerySmall(f64),
    Smallest(f64),
    Smaller(f64),
    Small(f64),
    Mid(f64),
    Big(f64),
    Bigger(f64),
    Biggest(f64),
    VeryBig(f64),
    ExtraBig(f64),
    AnomalBig(f64),
    GreatestBig(f64),
}
impl Size {
    pub fn new(value: f64) -> Self {
        match value {
            0.0..1.0 => Size::GreatestSmall(value),
            1.0..3.0 => Size::AnomalSmall(value),
            3.0..5.0 => Size::ExtraSmall(value),
            5.0..10.0 => Size::VerySmall(value),
            10.0..20.0 => Size::Smallest(value),
            20.0..30.0 => Size::Smaller(value),
            30.0..40.0 => Size::Small(value),
            40.0..60.0 => Size::Mid(value),
            60.0..70.0 => Size::Big(value),
            70.0..80.0 => Size::Bigger(value),
            80.0..90.0 => Size::Biggest(value),
            90.0..95.0 => Size::VeryBig(value),
            95.0..97.0 => Size::ExtraBig(value),
            97.0..99.0 => Size::AnomalBig(value),
            99.0..=100.0 => Size::GreatestBig(value),
            _ => panic!(),
        }
    }
    pub fn range(&self) -> Range {
        match self {
            Self::GreatestSmall(_) => Range::new(0.0, 1.0),
            Self::AnomalSmall(_) => Range::new(1.0, 3.0),
            Self::ExtraSmall(_) => Range::new(3.0, 5.0),
            Self::VerySmall(_) => Range::new(5.0, 10.0),
            Self::Smallest(_) => Range::new(10.0, 20.0),
            Self::Smaller(_) => Range::new(20.0, 30.0),
            Self::Small(_) => Range::new(30.0, 40.0),
            Self::Mid(_) => Range::new(40.0, 60.0),
            Self::Big(_) => Range::new(60.0, 70.0),
            Self::Bigger(_) => Range::new(70.0, 80.0),
            Self::Biggest(_) => Range::new(80.0, 90.0),
            Self::VeryBig(_) => Range::new(90.0, 95.0),
            Self::ExtraBig(_) => Range::new(95.0, 97.0),
            Self::AnomalBig(_) => Range::new(97.0, 99.0),
            Self::GreatestBig(_) => Range::new(99.0, 100.0),
        }
    }
    pub fn name(&self) -> String {
        match self {
            Self::GreatestSmall(_) => "-7".to_string(),
            Self::AnomalSmall(_) => "-6".to_string(),
            Self::ExtraSmall(_) => "-5".to_string(),
            Self::VerySmall(_) => "-4".to_string(),
            Self::Smallest(_) => "-3".to_string(),
            Self::Smaller(_) => "-2".to_string(),
            Self::Small(_) => "-1".to_string(),
            Self::Mid(_) => "=0".to_string(),
            Self::Big(_) => "+1".to_string(),
            Self::Bigger(_) => "+2".to_string(),
            Self::Biggest(_) => "+3".to_string(),
            Self::VeryBig(_) => "+4".to_string(),
            Self::ExtraBig(_) => "+5".to_string(),
            Self::AnomalBig(_) => "+6".to_string(),
            Self::GreatestBig(_) => "+7".to_string(),
        }
    }
    pub fn value(&self) -> f64 {
        match self {
            Self::GreatestSmall(x) => *x,
            Self::AnomalSmall(x) => *x,
            Self::ExtraSmall(x) => *x,
            Self::VerySmall(x) => *x,
            Self::Smallest(x) => *x,
            Self::Smaller(x) => *x,
            Self::Small(x) => *x,
            Self::Mid(x) => *x,
            Self::Big(x) => *x,
            Self::Bigger(x) => *x,
            Self::Biggest(x) => *x,
            Self::VeryBig(x) => *x,
            Self::ExtraBig(x) => *x,
            Self::AnomalBig(x) => *x,
            Self::GreatestBig(x) => *x,
        }
    }
    pub fn simple(&self) -> Sz {
        match self {
            Self::GreatestSmall(x) => Sz::new(*x),
            Self::AnomalSmall(x) => Sz::new(*x),
            Self::ExtraSmall(x) => Sz::new(*x),
            Self::VerySmall(x) => Sz::new(*x),
            Self::Smallest(x) => Sz::new(*x),
            Self::Smaller(x) => Sz::new(*x),
            Self::Small(x) => Sz::new(*x),
            Self::Mid(x) => Sz::new(*x),
            Self::Big(x) => Sz::new(*x),
            Self::Bigger(x) => Sz::new(*x),
            Self::Biggest(x) => Sz::new(*x),
            Self::VeryBig(x) => Sz::new(*x),
            Self::ExtraBig(x) => Sz::new(*x),
            Self::AnomalBig(x) => Sz::new(*x),
            Self::GreatestBig(x) => Sz::new(*x),
        }
    }
}
impl std::fmt::Display for Size {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::GreatestSmall(x) => write!(f, "GreatestSmall={}", x),
            Self::AnomalSmall(x) => write!(f, "AnomalSmall={}", x),
            Self::ExtraSmall(x) => write!(f, "ExtraSmall={}", x),
            Self::VerySmall(x) => write!(f, "VerySmall={}", x),
            Self::Smallest(x) => write!(f, "Smallest={}", x),
            Self::Smaller(x) => write!(f, "Smaller={}", x),
            Self::Small(x) => write!(f, "Small={}", x),
            Self::Mid(x) => write!(f, "Mid={}", x),
            Self::Big(x) => write!(f, "Big={}", x),
            Self::Bigger(x) => write!(f, "Bigger={}", x),
            Self::Biggest(x) => write!(f, "Biggest={}", x),
            Self::VeryBig(x) => write!(f, "VeryBig={}", x),
            Self::ExtraBig(x) => write!(f, "ExtraBig={}", x),
            Self::AnomalBig(x) => write!(f, "AnomalBig={}", x),
            Self::GreatestBig(x) => write!(f, "GreatestBig={}", x),
        }
    }
}
impl PartialEq for Size {
    fn eq(&self, other: &Self) -> bool {
        self.name() == other.name()
    }
}

#[derive(Debug, Clone)]
pub enum Sz {
    XS(f64),
    S(f64),
    M(f64),
    L(f64),
    XL(f64),
}
impl Sz {
    pub fn new(value: f64) -> Self {
        match value {
            0.0..10.0 => Sz::XS(value),
            10.0..30.0 => Sz::S(value),
            30.0..70.0 => Sz::M(value),
            70.0..90.0 => Sz::L(value),
            90.0..=100.0 => Sz::XL(value),
            _ => panic!(),
        }
    }
    pub fn range(&self) -> Range {
        match self {
            Self::XS(_) => Range::new(0.0, 10.0),
            Self::S(_) => Range::new(10.0, 30.0),
            Self::M(_) => Range::new(30.0, 70.0),
            Self::L(_) => Range::new(70.0, 90.0),
            Self::XL(_) => Range::new(90.0, 100.0),
        }
    }
    pub fn name(&self) -> String {
        match self {
            Self::XS(_) => "XS".to_string(),
            Self::S(_) => "S".to_string(),
            Self::M(_) => "M".to_string(),
            Self::L(_) => "L".to_string(),
            Self::XL(_) => "XL".to_string(),
        }
    }
    pub fn value(&self) -> f64 {
        match self {
            Self::XS(x) => *x,
            Self::S(x) => *x,
            Self::M(x) => *x,
            Self::L(x) => *x,
            Self::XL(x) => *x,
        }
    }
}
impl std::fmt::Display for Sz {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::XS(x) => write!(f, "XS={}", x),
            Self::S(x) => write!(f, "S={}", x),
            Self::M(x) => write!(f, "M={}", x),
            Self::L(x) => write!(f, "L={}", x),
            Self::XL(x) => write!(f, "XL={}", x),
        }
    }
}
impl PartialEq for Sz {
    fn eq(&self, other: &Self) -> bool {
        self.name() == other.name()
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn size_new() {
        assert_eq!(Size::new(0.1).name(), "-7");
        assert_eq!(Size::new(1.0).name(), "-6");
        assert_eq!(Size::new(3.0).name(), "-5");
        assert_eq!(Size::new(5.0).name(), "-4");
        assert_eq!(Size::new(10.0).name(), "-3");
        assert_eq!(Size::new(20.0).name(), "-2");
        assert_eq!(Size::new(30.0).name(), "-1");
        assert_eq!(Size::new(50.0).name(), "=0");
        assert_eq!(Size::new(60.0).name(), "+1");
        assert_eq!(Size::new(70.0).name(), "+2");
        assert_eq!(Size::new(80.0).name(), "+3");
        assert_eq!(Size::new(90.0).name(), "+4");
        assert_eq!(Size::new(95.0).name(), "+5");
        assert_eq!(Size::new(97.0).name(), "+6");
        assert_eq!(Size::new(99.0).name(), "+7");

        assert_eq!(Size::new(0.0).name(), "-7");
        assert_eq!(Size::new(0.5).name(), "-7");
        assert_eq!(Size::new(0.9).name(), "-7");
        assert_eq!(Size::new(0.99999).name(), "-7");
        assert_eq!(Size::new(1.0).name(), "-6");

        assert_eq!(Size::new(40.0).name(), "=0");
        assert_eq!(Size::new(49.0).name(), "=0");
        assert_eq!(Size::new(51.0).name(), "=0");
        assert_eq!(Size::new(59.9).name(), "=0");
        assert_eq!(Size::new(60.0).name(), "+1");

        assert_eq!(Size::new(99.0).name(), "+7");
        assert_eq!(Size::new(99.5).name(), "+7");
        assert_eq!(Size::new(99.9).name(), "+7");
        assert_eq!(Size::new(100.0).name(), "+7");
    }
    #[test]
    fn size_value() {
        assert_eq!(Size::new(0.1).value(), 0.1);
        assert_eq!(Size::new(50.11).value(), 50.11);
        assert_eq!(Size::new(100.0).value(), 100.0);
    }
    #[test]
    fn size_to_simple() {
        assert_eq!(Size::new(0.0).simple(), Sz::XS(0.1));
        assert_eq!(Size::new(9.9).simple(), Sz::XS(9.9));

        assert_eq!(Size::new(10.0).simple(), Sz::S(10.0));
        assert_eq!(Size::new(29.9).simple(), Sz::S(29.9));

        assert_eq!(Size::new(30.0).simple(), Sz::M(30.0));
        assert_eq!(Size::new(69.9).simple(), Sz::M(69.9));

        assert_eq!(Size::new(70.0).simple(), Sz::L(70.0));
        assert_eq!(Size::new(89.9).simple(), Sz::L(89.9));

        assert_eq!(Size::new(90.0).simple(), Sz::XL(80.0));
        assert_eq!(Size::new(100.0).simple(), Sz::XL(100.0));
    }
    #[test]
    fn size_eq() {
        assert_eq!(Size::new(0.0), Size::new(0.9));

        assert_eq!(Size::new(40.0), Size::new(59.9));

        assert_eq!(Size::new(99.0), Size::new(100.0));
    }
    #[test]
    fn simple_size_eq() {
        assert_eq!(Sz::new(0.0), Sz::new(1.0));
        assert_eq!(Sz::new(0.0), Sz::new(9.9));
        assert_ne!(Sz::new(9.9), Sz::new(10.0));

        assert_eq!(Sz::new(10.0), Sz::new(20.0));
        assert_eq!(Sz::new(10.0), Sz::new(29.9));
        assert_ne!(Sz::new(29.9), Sz::new(30.0));

        assert_eq!(Sz::new(30.0), Sz::M(33.3));
        assert_eq!(Sz::new(40.0), Sz::M(44.4));
        assert_eq!(Sz::new(50.0), Sz::M(55.5));
        assert_eq!(Sz::new(60.0), Sz::M(66.6));
        assert_ne!(Sz::new(69.9), Sz::L(70.0));

        assert_eq!(Sz::new(70.0), Sz::new(77.7));
        assert_eq!(Sz::new(80.0), Sz::new(88.8));
        assert_ne!(Sz::new(89.9), Sz::new(90.0));

        assert_eq!(Sz::new(90.0), Sz::new(99.9));
        assert_eq!(Sz::new(99.0), Sz::new(99.9));
        assert_eq!(Sz::new(100.0), Sz::new(90.0));
    }

    // let s = Sz::new(50);
    // let range = s.range();
    //
    // assert_eq!(range.min(), 30.0);
    // assert_eq!(range.max(), 70.0);
}
